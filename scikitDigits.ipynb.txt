{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "scikitDigits.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y3QA2d6ZhRtJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%matplotlib inline\n",
        "from sklearn.datasets import load_digits\n",
        "digits = load_digits()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DNzRUCk9hfWj",
        "colab_type": "text"
      },
      "source": [
        "Now that you have the dataset loaded you can use the commands below"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WRjJjfVShZf4",
        "colab_type": "code",
        "outputId": "3b7d9855-0df1-435e-97d3-bd336e752c18",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "# Print to show there are 1797 images (8 by 8 images for a dimensionality of 64)\n",
        "print(\"Image Data Shape\" , digits.data.shape)\n",
        "\n",
        "# Print to show there are 1797 labels (integers from 0-9)\n",
        "print(\"Label Data Shape\", digits.target.shape)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Image Data Shape (1797, 64)\n",
            "Label Data Shape (1797,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "03e_MfQfhnRR",
        "colab_type": "text"
      },
      "source": [
        "Showing the Images and Labels (Digits Dataset)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2moIztq5hrOI",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "n-jPyUCBhsYY",
        "colab_type": "code",
        "outputId": "6260d0c5-6b27-4917-c295-89d70841450c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 283
        }
      },
      "source": [
        "import numpy as np \n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.figure(figsize=(20,4))\n",
        "for index, (image, label) in enumerate(zip(digits.data[0:5], digits.target[0:5])):\n",
        "    plt.subplot(1, 5, index + 1)\n",
        "    plt.imshow(np.reshape(image, (8,8)), cmap=plt.cm.gray)\n",
        "    plt.title('Training: %i\\n' % label, fontsize = 20)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABHsAAAEKCAYAAACCF1ktAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzt3X+0pXddH/r3xwxUBZoZrYIm6BAR\nrNe7HMyUlsLCgKRFS016e+HirSyCbYPe2pus2mp0rV5i21XDrWhYt63NFGVSpbUdxMSLKGaWSam/\nKAkOrRBAmBtL0iKyyAQEhQV+7x97Tzs5npmz98z+nud7nnm91jprn7P3cz7PZ++Z98w+n/N9nqda\nawEAAABgHj5v6gYAAAAA2BzDHgAAAIAZMewBAAAAmBHDHgAAAIAZMewBAAAAmBHDHgAAAIAZMewZ\nQFU9vqpaVb15A7Xurarf30RfcLGTTRiPXMKYZBPGJJsXr4t62LP8S7/Ox3VT9zxHtXB9Vd1XVZ+s\nqlNVdbyqrp66N6Yhm9OrqqdU1d+vqp+pqpNnvNZPmro3piGX06uqq6rqNcs32x+tqk9X1Qer6l9U\n1VdO3R/TkM3pVdULquoNVfXuqvpYVf3hMptvqqrnTt0f05DN8VTV46rqA8vX+71T99PbvqkbmNgP\nbnPfjUkuTfLaJKe2PHaiUx+fTPKnk2xiSvpXk/yJDdTZTT+W5JVJHkjyL5I8LslLk/xSVb2itXZ0\nutaYiGxO79lJ/kGSluQDST6R5AmTdsTU5HJ6b86i319N8pNJ/ijJc7L4P/SlVfW81tpvTtgf05DN\n6b0wyXOTvD3J8SR/kORgkr+c5K9U1U2ttVdP1x4Tkc3x/EiSJ07dxG6p1trUPQylqh5I8pVJntJa\ne2DabuZvuXrnl5K8O8mzWmufWN7/9CT3JqkkT22tfXi6LhmBbO6uqjqY5LIk72qt/X5V3ZvkyiRf\nJo+cJpe7q6p+IMnrWmsf2XL/P07y/Ul+o7X2rEmaYyiyubuq6vNba3+4zf1XJLkvi19kfmlrbesP\n91xkZHM6VfUtSX4+yXdlsdjgfa21r5m2q74u6sO4ztfpYxWr6guq6h8tl4J9pqr+6fLxL66qm6rq\n31fVf10+9rvLwyGu3KbetsdRVtUPL+8/XFV/bXmY0x8sl27/ZFV96dl623Lfi5Z1/m5VPbOq3lpV\nH18+h+Pb9bT8vq+oqp9a7u9Ty/3/b2fWu7BXMskibEnyg6cHPUnSWntfkn+ZxX+OL9vAfrgIyObm\nstlae6C19qutNcdlc0HkcqO5/MdbBz1L/zDJ55L8uar6/AvdDxcH2dxoNv/YoGd5/8ksfnn5mCx+\nwIcdyeZGf9Y8va8vTvLjSe5I8lObqjs6w57z93lZLKe+Lsm/T3JrkvuXjz0ji2V7f5jkziyWi92T\n5FuS/Fqtf+zu92Yx+Hh/kn+W5LeTfHuSt1bVJWvUeU6St2VxWMaRLFbUPD/JPbXlWP+qujzJryf5\na1ksKXxtFqtvbk/y17crfkYw1zn51/OW/bx1m8d+YXn7/DXqgWxucZ7ZhE2Syy02nMvPZXFI1+kP\nWJVsbrHJbFbVZVm8jp9M8sELrcdFRTa3uMBs3pbF0PU7z+N796yL/Zw9F+ILsjh/xddtsyTznUme\n1Fp7+Mw7q+qrsjiW9zVJ/swa+/qmJIdaa+9f1qksppLfmuQvJnnLinWuSfLi1tobz+jpe5L8cJK/\nlUXQT3tNki9P8n+11v7hGdv/8yS/skbvZ1VVT0yyP8mHW2sf32aT317ePm0T++OiIZswHrns62VZ\nvIk93lr7zC7sj/mQzQ2qqj+f5C9kkccnZ/HcvjDJ37RSljXJ5oZU1cuyONfQS1trv1tVj99k/ZFZ\n2XNhvn+7Y29bax/bGr7l/R9M8nNJDlfVF62xn39yOnzLOi3J65ZfPnONOm89M3xLR7bWqaonJPlf\nknwkyT85c+PW2m8kOXaW+ndncfKvVSemly5vHznL46fv379iPThNNh9t3WxCD3L5aBvJZVV9TRZv\npD+d5O9dSC0uWrL5aBeSzT+f5FVJfiCLIewfJfnfW2u3n0ctkM1HWzubVfXkJP9PkmOttX+76vfN\nhWHPhfmPZ3ugqp5Xi8stPrg8jrJVVUvyiuUml62xn3u3ue9Dy9sDF1JneZ6cR7bU+bosVn3dd5Zj\nkLedtrbWPtlae29r7cE1eoIeZPPRtWSTEcjlo2tdcC6Xh4i8JYtfnryytdbrSi7Mm2w+utZ5Z7O1\n9sOttcpiNc//nOTfJTlWVa9ZtxZENrfWWiubyxVKR7P4Zcj/scr3zI3DuM7fp848ofCZqurbk/yr\nLC5vd1eS/y+LY3VbFks7n5X1Llm33Zn7P7u8Xec4yrNdAeCzW+qcXnHzu2fZ/mz3r+v0yp1Lz/L4\n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\nBXcEnI9tsymXMDnZhDHJJoxJNmFDVl7ZU1WPTfKtSY5t93hr7Uhr7XBr7fCmmgN2dq5syiVMRzZh\nTLIJY5JN2Kx1DuP65iTvbK39bq9mgPMimzAm2YQxySaMSTZhg9YZ9nxbznIIFzAp2YQxySaMSTZh\nTLIJG7TSsKeqHpfk6iRv6tsOsA7ZhDHJJoxJNmFMsgmbt9IJmltrn0zyxZ17AdYkmzAm2YQxySaM\nSTZh89a99DoAAAAAAzPsAQAAAJgRwx4AAACAGTHsAQAAAJgRwx4AAACAGTHsAQAAAJiRaq1tvmjV\n7yX5nTW+5U8l+ejGG9k9+p/WaP1/ZWvtS6ZuYquLMJfJ3n8O+t8s2RzDXu8/2fvPYbT+ZXMM+p/e\naM9BNseg/2mN2P9K2ewy7FlXVd3bWjs8dR/nS//T2uv9j2oOr+tefw76Zzt7/XXd6/0ne/857PX+\nR7XXX1f9T28Oz2FEe/111f+09nL/DuMCAAAAmBHDHgAAAIAZGWXYc2TqBi6Q/qe11/sf1Rxe173+\nHPTPdvb667rX+0/2/nPY6/2Paq+/rvqf3hyew4j2+uuq/2nt2f6HOGcPAAAAAJsxysoeAAAAADbA\nsAcAAABgRiYd9lTVC6vqfVX1gaq6acpe1lVVT66qu6vqPVX17qq6YeqezkdVXVJVv1lVb566l3VV\n1f6qemNVvbeq7q+qZ03d01zI5vRkk+3I5vRkk+3I5vRkk+3I5vRkczqTnbOnqi5J8v4kVyd5MMk7\nknxba+09kzS0pqr6siRf1lp7Z1U9Icl9Sa7dK/2fVlV/J8nhJH+ytfaiqftZR1XdnuQ/tNZeV1WP\nTfKFrbVTU/e118nmGGSTrWRzDLLJVrI5BtlkK9kcg2xOZ8qVPc9M8oHW2snW2meS/HSSaybsZy2t\ntf/WWnvn8vNPJLk/yWXTdrWeqro8yV9K8rqpe1lXVV2a5LlJfjxJWmuf2UvBG5xsTkw2OQvZnJhs\nchayOTHZ5Cxkc2KyOa0phz2XJfnQGV8/mD32l/e0qjqY5BlJ3j5tJ2u7Ncn3JvmjqRs5D09J8ntJ\nXr9cFvi6qnrc1E3NhGxOTzbZjmxOTzbZjmxOTzbZjmxOTzYn5ATNF6iqHp/kZ5Lc2Fr7+NT9rKqq\nXpTkI621+6bu5TztS/INSX6stfaMJJ9MsqeOw6Uv2ZyMbHJOsjkZ2eScZHMyssk5yeZk9nw2pxz2\nPJTkyWd8ffnyvj2jqh6TRfDe0Fp709T9rOnZSb61qh7IYknj86vqp6ZtaS0PJnmwtXZ6uv3GLMLI\nhZPNackmZyOb05JNzkY2pyWbnI1sTks2JzblsOcdSb66qp6yPNnRS5P83IT9rKWqKovj9+5vrf3I\n1P2sq7X2/a21y1trB7N47X/peD81AAAAzElEQVS5tfbtE7e1stbah5N8qKqevrzrm5LsqZOVDUw2\nJySbnINsTkg2OQfZnJBscg6yOSHZnN6+qXbcWvtsVX13krcmuSTJT7TW3j1VP+fh2UleluQ/V9WJ\n5X0/0Fp7y4Q9XWz+dpI3LP/xPpnkFRP3MwuyyQbIZgeyyQbIZgeyyQbIZgeyyQbs6WxOdul1AAAA\nADbPCZoBAAAAZsSwBwAAAGBGDHsAAAAAZsSwBwAAAGBGDHsAAAAAZsSwBwAAAGBGDHsAAAAAZuT/\nB7saHoGmAvP2AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 1440x288 with 5 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-D0FSAtAhwMy",
        "colab_type": "text"
      },
      "source": [
        "Splitting Data into Training and Test Sets (Digits Dataset)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GZMou9o5hzuv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train, x_test, y_train, y_test = train_test_split(digits.data, digits.target, test_size=0.25, random_state=0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_LWPWPuMh04d",
        "colab_type": "text"
      },
      "source": [
        "Scikit-learn 4-Step Modeling Pattern (Digits Dataset)\n",
        "Step 1. Import the model you want to use\n",
        "\n",
        "In sklearn, all machine learning models are implemented as Python classes"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gfJRCLa1h4Q6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.linear_model import LogisticRegression"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CRX8pNZeh8EJ",
        "colab_type": "text"
      },
      "source": [
        "Step 2. Make an instance of the Model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PuJODHkdiFkt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "logisticRegr = LogisticRegression()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "adqlUNxniJAL",
        "colab_type": "text"
      },
      "source": [
        "Step 3. Training the model on the data, storing the information learned from the data\n",
        "\n",
        "Model is learning the relationship between x (digits) and y (labels)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hwPC7PiFiKM3",
        "colab_type": "code",
        "outputId": "703dd4f8-1666-48c7-84f1-64d882dbdcec",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 202
        }
      },
      "source": [
        "logisticRegr.fit(x_train, y_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
            "  FutureWarning)\n",
            "/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/logistic.py:469: FutureWarning: Default multi_class will be changed to 'auto' in 0.22. Specify the multi_class option to silence this warning.\n",
            "  \"this warning.\", FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kVApqldYiNGx",
        "colab_type": "text"
      },
      "source": [
        "Step 4. Predict the labels of new data (new images)\n",
        "\n",
        "Uses the information the model learned during the model training process"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RdmeFiaTiQzY",
        "colab_type": "code",
        "outputId": "63d9401f-59ce-4399-eaf4-b9a7f4747214",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# Returns a NumPy Array\n",
        "# Predict for One Observation (image)\n",
        "logisticRegr.predict(x_test[0].reshape(1,-1))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([2])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3sz3hts4iUoj",
        "colab_type": "text"
      },
      "source": [
        "# Predict for Multiple Observations (images) at Once\n",
        "logisticRegr.predict(x_test[0:10])"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gpffMJ69iYkO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Make predictions on entire test data\n",
        "predictions = logisticRegr.predict(x_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5HDFJ7YRibIU",
        "colab_type": "text"
      },
      "source": [
        "Measuring Model Performance (Digits Dataset)\n",
        "While there are other ways of measuring model performance, we are going to keep this simple and use accuracy as our metric. To do this are going to see how the model performs on the new data (test set)\n",
        "\n",
        "accuracy is defined as:\n",
        "\n",
        "(fraction of correct predictions): correct predictions / total number of data points"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SckDnoGWiejU",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sMRuGURNiho-",
        "colab_type": "code",
        "outputId": "f613b547-7669-4210-8fb0-c62e8102f411",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "# Use score method to get accuracy of model\n",
        "score = logisticRegr.score(x_test, y_test)\n",
        "print(score)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9533333333333334\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vyMYIx57iitm",
        "colab_type": "text"
      },
      "source": [
        "Confusion Matrix (Digits Dataset)\n",
        "A confusion matrix is a table that is often used to describe the performance of a classification model (or \"classifier\") on a set of test data for which the true values are known. In this section, I am just showing two python packages (Seaborn and Matplotlib) for making confusion matrixes."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tSGm4N5Dil4g",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UWT5CBM3io2y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import numpy as np \n",
        "\n",
        "import seaborn as sns\n",
        "from sklearn import metrics"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KjXcI9ORiqzC",
        "colab_type": "text"
      },
      "source": [
        "Method 1 (Seaborn)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qnvHlBstit25",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "cm = metrics.confusion_matrix(y_test, predictions)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4WpYvf4Niw3X",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7PXfeL4-iz6i",
        "colab_type": "code",
        "outputId": "a86dee8a-2ae6-4d8a-8aef-fc34793ecf19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        }
      },
      "source": [
        "plt.figure(figsize=(9,9))\n",
        "sns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\n",
        "plt.ylabel('Actual label');\n",
        "plt.xlabel('Predicted label');\n",
        "all_sample_title = 'Accuracy Score: {0}'.format(score)\n",
        "plt.title(all_sample_title, size = 15);\n",
        "plt.savefig('toy_Digits_ConfusionSeabornCodementor.png')\n",
        "#plt.show();"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\nfDUyIDCzO83s1JrYNkCnpNPY9F02W9JzOHCwkJnz19Kv+9mllunX/WymvbMKgNkfptK9c+vi9pnz\n17L/wEG27shh03fZdEo6rVLbrKxlqZv5Pm9fhY/3uyiJ6fPWALA6bSsNoyJpHBNFz3Nbs2jVRnLz\n9rE7v4BFqzbS67w2NI6JIqreCaxO2wrA9Hlr6H/RLwPKBt7vP/B+H3o9n9efY6/my87MIGXFJ/Tu\nP6hK6322ajntOp1LVIOGRDVoQLtO5/LZqmV8n53Fvr17aZN0NmbGJX36sfKTjwFY+clielzaH4Ae\nl/Znhb+9Mrzaf7UlX3VyruZvx0pNVQj+Cqwys0/M7A4zi6vOjTeJb8j2jNzi++kZuSTGNSy7zC7f\nMoWFReT9UEBMdD0S4w63A6Rn5tIkvmGltllt+eMasD1jd4kMu8vPUKI9PXNP6fa4BoHvv5b3HwS/\nD72ez+vPsVfzvfD0P7jp9tGEmZVqn5o8iTtuHEzy0//gwP79ZdbLycokNv7wp9WY+ARysjLJzs4k\nNi6huD02PoHs7EwAdufmcHKs709jo5hYdufmVDqnV/uvtuST8tXUgGAz0BTfwKAD8JWZfWBmN5pZ\nVA3tU0QkYKuWLSU6uhFntDmrVPvQW+8kefpbTHxxGvl5e5g57ZVq37eZYdiRFxTP0RyCI3POuSLn\n3ALn3M1AE+BZoA++wUK5zGy4ma0xszXJyRUfn92RuYemCY2K7ycmNCI9a0/ZZRr7lgkPD6NB/Uhy\ndu8lPetwO0BifCN2ZO6p1Dary46sPJomRJfIEF1+hhLtifENS7dnVW0CUqn91/L+g+D3odfzef05\n9mK+r9b9l5XLljD0ykuZ8JexfPFZCv946D5Ojo3DzKhTty49fzOQr9enlVk3Ji6e7MxdxfdzMjOI\niYsnNjae7KyM4vbszAxiY+MBiG4Uw/fZWQB8n51Fw0YnU1le7L/alE/KV1MDglJDXefcAefc2865\na4DmFa3knEt2znV0znUcPnx4hRtf8+VWWjWLo3mTGOpEhDO4d3vmLf6i1DLzlqxjSP8uAAzq0Y4l\nKRt97Yu/YHDv9tStE0HzJjG0ahZHStqWSm2zusxbmsa1/tnlnZOak/fDj+zKyWfhyq/p0eVMoqMi\niY6KpEeXM1m48mt25eSTv/cnOif5uu7avh15d0nZP0qVVdv7D4Lfh17P5/Xn2Iv5ht12J6/OWcCU\n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\nw+YAAAAASUVORK5CYII=\n",
            "text/plain": [
              "<Figure size 648x648 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}